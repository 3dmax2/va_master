30fd9948287aed2a7e00eae91f84a145
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactable = require('reactable');

var _reactBootstrap = require('react-bootstrap');

var _reactRedux = require('react-redux');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Network = require('../network');

function isEmpty(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

function getRandomColor() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}
function getRandomColors(count) {
    var letters = '0123456789ABCDEF'.split('');
    var colors = [];
    for (var j = 0; j < count; j++) {
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        colors.push(color);
    }
    return colors;
}
function arr2str(arr) {
    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ', ';

    return arr.join(delimiter);
}
function str2arr(str) {
    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ', ';

    return str.split(delimiter);
}
function obj2str(obj, key) {
    return obj[key];
}
function reduceArr(arr, key) {
    return arr.map(function (obj) {
        return obj[key];
    });
}
function objArr2str(arr, key) {
    return arr2str(reduceArr(arr, key));
}
function getTableRow(columns, data) {
    return columns.map(function (col, index) {
        return _react2.default.createElement(
            _reactable.Td,
            { key: col, column: col },
            data[index]
        );
    });
}
function getTableRowWithLink(columns, data, onClick, index) {
    var result = [_react2.default.createElement(
        _reactable.Td,
        { key: columns[0], column: columns[0] },
        _react2.default.createElement(
            'span',
            { className: 'link', onClick: onClick.bind(null, data[0], index) },
            data[0]
        )
    )];
    return result.concat(getTableRow(columns.slice(1), data.slice(1)));
}
function getTableRowWithAction(columns, data, btnText, btnVal, btnClick, onLinkClick, rowIndex) {
    var rows = onLinkClick ? getTableRowWithLink(columns, data, onLinkClick, rowIndex) : getTableRow(columns, data);
    rows.push(_react2.default.createElement(
        _reactable.Td,
        { key: 'Actions', column: 'Actions' },
        _react2.default.createElement(
            _reactBootstrap.Button,
            { type: 'button', bsStyle: 'primary', onClick: btnClick, value: btnVal },
            btnText
        )
    ));
    return rows;
}
function getTableRowWithActions(columns, data, actions, action, param, onLinkClick, rowIndex) {
    var rows = onLinkClick ? getTableRowWithLink(columns, data, onLinkClick, rowIndex) : getTableRow(columns, data);
    var items = actions.map(function (a) {
        return _react2.default.createElement(
            _reactBootstrap.MenuItem,
            { key: a, eventKey: a },
            a
        );
    });
    rows.push(_react2.default.createElement(
        _reactable.Td,
        { key: 'Actions', column: 'Actions' },
        _react2.default.createElement(
            _reactBootstrap.DropdownButton,
            { bsStyle: 'primary', title: 'Choose', onSelect: action.bind(null, param, rowIndex) },
            items
        )
    ));
    return rows;
}
function getModalHeader(title) {
    return _react2.default.createElement(
        _reactBootstrap.Modal.Header,
        { closeButton: true },
        _react2.default.createElement(
            _reactBootstrap.Modal.Title,
            null,
            title
        )
    );
}
function getModalFooter(buttons) {
    var btns = buttons.map(function (btn, i) {
        var label = btn.label,
            bsStyle = btn.bsStyle,
            onClick = btn.onClick;

        return _react2.default.createElement(
            _reactBootstrap.Button,
            { key: i, onClick: onClick, bsStyle: bsStyle },
            label
        );
    });
    return _react2.default.createElement(
        _reactBootstrap.Modal.Footer,
        null,
        btns
    );
}

function initializeFields(fields) {
    var state = {};
    for (var i = 0; i < fields.length; i++) {
        state[fields[i].key] = "";
    }return state;
}

function initializeFieldsWithValues(fields, values) {
    var state = {};
    for (var i = 0; i < fields.length; i++) {
        var key = fields[i].key;
        state[key] = values[key];
    }
    return state;
}

function initSelectOptions(arr) {
    return arr.map(function (o) {
        return { label: o, value: o };
    });
}

function getReduxComponent(ReactComponent, reducers) {
    return (0, _reactRedux.connect)(function (state) {
        var newstate = { auth: state.auth };
        if (reducers) {
            for (var i = 0; i < reducers.length; i++) {
                var r = reducers[i];
                newstate[r] = state[r];
            }
        }
        return newstate;
    })(ReactComponent);
}

function callPanelAction(token, data, callbackSuccess, callbackError) {
    Network.post('/api/panels/action', token, data).done(function (msg) {
        if (typeof msg === 'string') {
            callbackSuccess(msg);
        }
    }).fail(function (msg) {
        callbackError(msg);
    });
}

function download(url, token, data, fileWithExt, callback) {
    Network.download_file(url, token, data).done(function (d) {
        var data = new Blob([d], { type: 'octet/stream' });
        var url = window.URL.createObjectURL(data);
        var tempLink = document.createElement('a');
        tempLink.style = "display: none";
        tempLink.href = url;
        tempLink.setAttribute('download', fileWithExt);
        document.body.appendChild(tempLink);
        tempLink.click();
        setTimeout(function () {
            document.body.removeChild(tempLink);
            window.URL.revokeObjectURL(url);
        }, 100);
    }).fail(function (msg) {
        callback(msg);
    });
}

function getSpinner(spinnerStyle) {
    return _react2.default.createElement(
        'span',
        { className: 'spinner', style: spinnerStyle },
        _react2.default.createElement('i', { className: 'fa fa-spinner fa-spin fa-3x', 'aria-hidden': 'true' })
    );
}

function capitalizeFirstLetter(text) {
    return text[0].toUpperCase() + text.substr(1);
}

function getFormFields(fields) {
    return fields.map(function (f) {
        return _react2.default.createElement(
            _reactBootstrap.FormGroup,
            null,
            _react2.default.createElement(
                'label',
                { className: 'col-sm-' + (12 - f.size) + ' control-label' },
                f.label
            ),
            _react2.default.createElement(
                'div',
                { className: 'col-sm-' + f.size },
                _react2.default.createElement('input', { type: f.type, className: 'form-control', ref: f.key })
            )
        );
    });
}

module.exports = {
    isEmpty: isEmpty,
    getRandomColor: getRandomColor,
    getRandomColors: getRandomColors,
    getTableRow: getTableRow,
    getTableRowWithAction: getTableRowWithAction,
    getTableRowWithActions: getTableRowWithActions,
    getModalHeader: getModalHeader,
    getModalFooter: getModalFooter,
    initializeFields: initializeFields,
    initializeFieldsWithValues: initializeFieldsWithValues,
    arr2str: arr2str,
    reduceArr: reduceArr,
    objArr2str: objArr2str,
    initSelectOptions: initSelectOptions,
    getReduxComponent: getReduxComponent,
    callPanelAction: callPanelAction,
    download: download,
    getSpinner: getSpinner,
    capitalizeFirstLetter: capitalizeFirstLetter,
    getFormFields: getFormFields
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,