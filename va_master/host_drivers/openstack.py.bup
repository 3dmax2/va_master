from . import base
from .base import Step, StepResult
from tornado.httpclient import AsyncHTTPClient, HTTPRequest
import tornado.gen
import json
import subprocess

PROVIDER_TEMPLATE = '''VAR_PROVIDER_NAME:
  auth_minion: VAR_THIS_IP
  minion:
    master: VAR_THIS_IP
    master_type: str
  # The name of the configuration profile to use on said minion
  ssh_key_name: VAR_SSH_NAME
  ssh_key_file: VAR_SSH_FILE
  ssh_interface: private_ips
  driver: nova
  user: VAR_USERNAME
  tenant: VAR_TENANT
  password: VAR_PASSWORD
  identity_url: VAR_IDENTITY_URL
  compute_region: VAR_REGION
  networks:
    - net-id: VAR_NETWORK_ID'''

PROFILE_TEMPLATE = '''VAR_PROFILE_NAME:
    provider: VAR_PROVIDER_NAME
    image: VAR_IMAGE
    size: VAR_SIZE
    securitygroups: VAR_SEC_GROUP'''

class OpenStackDriver(base.DriverBase):
    def __init__(self):
        super(OpenStackDriver, self).__init__()
        self.regions = ['RegionOne']


    @tornado.gen.coroutine
    def driver_id(self):
        raise tornado.gen.Return('openstack')

    @tornado.gen.coroutine
    def friendly_name(self):
        raise tornado.gen.Return('OpenStack')

    @tornado.gen.coroutine
    def new_host_step_descriptions(self):
        raise tornado.gen.Return([
            {'name': 'Host info'},
            {'name': 'Pick a Network'},
            {'name': 'Security'}
        ])

    @tornado.gen.coroutine
    def get_salt_configs(self):
        pass

    @tornado.gen.coroutine
    def get_steps(self):
        host_info = Step('Host info')
        host_info.add_field('hostname', 'Hostname', type = 'str')
        host_info.add_field('keystone_url', 'Keystone hostname:port (xx.xx.xxx.xx:35357)', type = 'str')
        host_info.add_field('username', 'Username', type = 'str')
        host_info.add_field('password', 'Password', type = 'str')
        host_info.add_field('tenant', 'Tenant', type = 'str')
        host_info.add_field('region', 'Region', type = 'options')

        raise tornado.gen.Return([host_info])

    @tornado.gen.coroutine
    def get_token(self, field_values):
        host, username, password, tenant = (field_values['keystone_url'],
            field_values['username'], field_values['password'],
            field_values['tenant'])
        url = 'http://%s/v2.0/tokens' % host
        data = {
            'auth': {
                'tenantName': tenant,
                'passwordCredentials': {
                    'username': username,
                    'password': password
                }
            }
        }
        req = HTTPRequest(url, 'POST', body=json.dumps(data), headers={
            'Content-Type': 'application/json'
        })
        try:
            resp = yield self.client.fetch(req)
        except:
            import traceback
            traceback.print_exc()
            raise tornado.gen.Return((None, None))
        body = json.loads(resp.body)
        token = body['access']['token']['id']
        services = {}
        for serv in body['access']['serviceCatalog']:
            for endpoint in serv['endpoints']:
                if 'publicURL' not in endpoint: continue
                services[serv['type']] = endpoint['publicURL']
        raise tornado.gen.Return((token, services))

    @tornado.gen.coroutine
    def get_networks(self, token_data):
        url = token_data[1]['network']
        
        with open('/tmp/token_data', 'w') as f: 
            f.write(str(token_data))

        req = HTTPRequest('%s/v2.0/networks' % url, 'GET', headers={
            'X-Auth-Token': token_data[0],
            'Accept': 'application/json'
        })
        try:
            resp = yield self.client.fetch(req)
        except:
            import traceback; traceback.print_exc()
            raise tornado.gen.Return([])
        body = json.loads(resp.body)
        networks = ['%s | %s' % (x['name'], x['id']) for x in body['networks']]
        raise tornado.gen.Return(networks)

    @tornado.gen.coroutine
    def get_openstack_resource(self, token_data):
        url = token_data[1]['network']

        req = HTTPRequest('%s/v2.0/networks' % url, 'GET', headers={
            'X-Auth-Token': token_data[0],
            'Accept': 'application/json'
        })
        try:
            resp = yield self.client.fetch(req)
        except:
            import traceback; traceback.print_exc()
            raise tornado.gen.Return([])
        body = json.loads(resp.body)
        networks = ['%s | %s' % (x['name'], x['id']) for x in body['networks']]
        raise tornado.gen.Return(networks)


    @tornado.gen.coroutine
    def get_securitygroups(self, token_data, tenant):
        url = token_data[1]['compute']
        req = HTTPRequest('%s/os-security-groups' % (url), 'GET', headers={
            'X-Auth-Token': token_data[0],
            'Accept': 'application/json'
        })
        try:
            resp = yield self.client.fetch(req)
        except:
            import traceback; traceback.print_exc()
            raise tornado.gen.Return([])
        body = json.loads(resp.body)
        secgroups = body['security_groups']
        secgroups = ['%s | %s' % (x['name'], x['id']) for x in secgroups]
        raise tornado.gen.Return(secgroups)

    @tornado.gen.coroutine
    def validate_field_values(self, step_index, field_values):
        if step_index < 0:
            raise tornado.gen.Return(StepResult(
                errors=[], new_step_index=0, option_choices={'region' : self.regions,}
            ))
        elif step_index == 0:
            try: 
                networks = []
                token_data = yield self.get_token(field_values)
                networks = yield self.get_networks(token_data)
                sec_groups = yield self.get_securitygroups(token_data, field_values['tenant'])
                services_plain = ['- %s:%s' % (x[0], x[1]) for x in token_data[1].iteritems()]
                services_plain = '; '.join(services_plain)
            except Exception as e: 
                raise tornado.gen.Return(StepResult(
                    errors = ['Failed adding host; Error was : ' + str(e)], new_step_index = -1, option_choices = {}
                ))

            self.field_values = {
                'driver_name' : 'openstack',
                'hostname' : field_values['hostname'],
                'username' : field_values['username'],
                'tenant' : field_values['tenant'],
                'password' : field_values['password'],
                'host_url' : 'http://' + field_values['keystone_url'] + '/v2.0',
                'region' : field_values['region'],
                'networks' : networks, 
                'sec_group' : sec_groups

            }
            raise tornado.gen.Return(StepResult(
                errors=[], new_step_index=-1, option_choices={}
            ))

